/**
 * MyBankController2 class having constructor and methods for printing account details and creating new account using BankAccount class.
 * Class uses ArrayList to store list of accounts and has methods for listing details of all accounts and listing details of accounts which are active.
 * Also, class has method for getting index for particular account number from ArrayList, Displaying account details, withdrawing specified amount from account and Removing account using account number as parameter.
 * @author (Shreeya Lokare)
 * @version (3.0)
 */
//Importing package java extension for using GUI widget toolkit- Swing and Util package for creating Arraylist
import javax.swing.JOptionPane;
import java.util.ArrayList;
//Class Definition
public class MyBankController2
{
    //ArrayList declaration for instance variables
    private ArrayList<BankAccount> newAccounts;

    /**
     * Constructor for objects of class BankAccount
     */
    public MyBankController2()
    {
        //Initializing ArrayList instance variables
        newAccounts = new ArrayList<BankAccount>();
    }

    /**
     * Method for printing account details
     * @ param account this is first parameter for printAccountDetails method 
     * @ return nothing
     */
    public void printAccountDetails(BankAccount account)
    {
        //toString method from class BankAccount is called for printing details
        JOptionPane.showMessageDialog(null,account.toString(),"Account Details are:",JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Method for creating new account and printing details of account using printAccountDetails method
     * @ param customerName is first parameter for createAccount method 
     * @ param accNumber is second parameter for createAccount method
     * @ return nothing
     */
    public void createAccount(String customerName,String accNumber)
    {
        //Object creation 
        BankAccount newBankAcc;
        newBankAcc = new BankAccount(customerName,accNumber);
        //Adding into ArrayList
        newAccounts.add(newBankAcc);
        printAccountDetails(newBankAcc);
    }

    /**
     * Method displays list of all accounts created before
     * @ param no parameter 
     * @ return nothing
     */
    public void listAllAccounts()
    {
        String info="";
        //Loop for iterating till size of ArrayList
        for(int i=0;i<newAccounts.size();i++)
        {
            info += newAccounts.get(i).toString()+"\n";
        }
        JOptionPane.showMessageDialog(null,info,"Details of all accounts: ",JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Method Displays list of all accounts which are created and are active
     * @ param no parameter 
     * @ return nothing
     */
    public void listAllOpenAccounts()
    {
        String info = "";
        //Loop for iterating till size of ArrayList
        for(int i=0;i<newAccounts.size();i++)
        {
            //Checks if the status of account status is active
            if(newAccounts.get(i).getStatus() == true)
            {
                info += newAccounts.get(i).toString()+"\n";
            }
        }
        JOptionPane.showMessageDialog(null,info,"Details of all open account : ",JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Method Returns index of account numbers stored in ArrayList
     * @ param accNumber is first parameter for getIndex method 
     * @ return int index of specified account in ArrayList
     */
    private int getIndex(String accNumber)
    {
        //Loop for traversing 
        for(int i=0;i<newAccounts.size();i++)
        {
            //Checks if account exits or not using equals method for comparing account number
            if(newAccounts.get(i).getAcnumber().equals(accNumber))
            {
                return i;
            }
        }
        JOptionPane.showMessageDialog(null,"Account doesn't exist! ","Info",JOptionPane.ERROR_MESSAGE);
        //Returns -1 if does not finds a match
        return -1;
    }

    /**
     * Method for withdrawing amount from account
     * @ param accNumber is first parameter for makeWithdrawal method 
     * @ param withdrawAmount is second parameter for makeWithdrawal method 
     * @ return nothing
     */
    public void makeWithdrawal(String accNumber,double withdrawAmount)
    {
        //Gets index of account using getIndex method
        int temp=getIndex(accNumber);
        //Withdraws specified amount using makeWithdrawal method
        if(temp!=-1)
        {
            newAccounts.get(temp).makeWithdrawal(withdrawAmount);
        }
    }

    /**
     * Method for withdrawing amount from account
     * @ param accNumber is first parameter for closeAccount method 
     * @ return nothing
     */
    public void closeAccount(String accNumber)
    {
        //Gets index of account using getIndex method
        int temp=getIndex(accNumber);
        if(temp!=-1)
        {
            newAccounts.get(temp).closeAccount();
        }
    }

    /**
     * Method for displaying account details
     * @ param accNumber is first parameter for closeAccount method 
     * @ return nothing
     */
    public void displayAccount(String accNumber)
    { 
        int temp=getIndex(accNumber);
        if(temp!=-1)
        {
            String info=newAccounts.get(temp).toString();
            JOptionPane.showMessageDialog(null,info,"Output :",JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * Method for removing account from ArrayList
     * @ param accNumber is first parameter for removeAccount method 
     * @ return nothing
     */
    public void removeAccount(String accNumber)
    {
        int temp=getIndex(accNumber);
        if(temp!=-1)
        {
            double currentBal=newAccounts.get(temp).getBalance();
            boolean accStatus=newAccounts.get(temp).getStatus();
            String accDetails=newAccounts.get(temp).toString();
            /*Checks if account is active and confirms the removal action using confirm dialog box
             * If there is balance in the amount, refunds the amount using withdraw method
             */
            if(accStatus!=false)
            {
                int dialog=JOptionPane.YES_NO_OPTION;
                String info=newAccounts.get(temp).toString();
                int resultDialog=JOptionPane.showConfirmDialog(null,accDetails+"\nAre you sure you want to close and remove your account?"
                    ,"Confirm Removal",dialog);
                if(resultDialog==JOptionPane.YES_OPTION)
                {
                    accStatus=false;
                    if(currentBal>0)
                    {
                        newAccounts.get(temp).makeWithdrawal(currentBal);
                    }
                    JOptionPane.showMessageDialog(null,"Account has been removed! \nAccount balance : "+currentBal+" has been refunded!"
                    ,"Removal Successful :",JOptionPane.INFORMATION_MESSAGE);
                    newAccounts.remove(temp);

                } 
            }
            else
            {
                int dialog=JOptionPane.YES_NO_OPTION;
                String info=newAccounts.get(temp).toString();
                int resultDialog=JOptionPane.showConfirmDialog(null,accDetails+"\nAre you sure you want to close and remove your account?"
                    ,"Confirm Removal",dialog);
                if(resultDialog==JOptionPane.YES_OPTION)
                {
                    accStatus=false;
                    if(currentBal>0)
                    {
                        newAccounts.get(temp).makeWithdrawal(currentBal);
                    }
                    JOptionPane.showMessageDialog(null,"Account has been removed! \nAccount balance : "+currentBal+" has been refunded!"
                    ,"Removal Successful :",JOptionPane.INFORMATION_MESSAGE);
                    newAccounts.remove(temp);

                } 
            }
        }
    }
}
