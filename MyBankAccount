/**
 * BankAccount class having accessors, constructor and methods for withdrawing or lodging amounts. 
 * Allows user to make lodgements, withdrawals and checking account details.Also has method for closing account.
 * @author (Shreeya Lokare)
 * @version (1.0/04-02-2019)
 */
//Importing package java extension for using GUI widget toolkit- Swing 
import javax.swing.JOptionPane;

//Class definition
public class BankAccount
{
    // Gloabal variable declaration
    public String customerName;
    public int accNumber;
    public double currentBal;
    public boolean accStatus;

    /**
     * Constructor for objects of class BankAccount
     */
    public BankAccount(String customerName,int accNumber)
    {
        //Initializing balance and account status
        this.customerName=customerName;
        this.accNumber=accNumber;
        currentBal=0.0;
        accStatus=true;
    }
    //Accessor for status of account
    public boolean getStatus()
    {
        return accStatus;
    }
    //Accessor for acount balance
    public double getBalance()
    {
        return currentBal;
    }
    //Accessor for account number
    public int getAcnumber()
    {
        return accNumber;
    }
    //Accessor for customer name
    public String getName()
    {
        return customerName;
    }
    //Method for making lodgement into account
    public void makeLodgement(double lodgeAmount)
    {
        //Makes lodgement only if lodging amount is greater than zero and account status is "active". Lodgement amount is added to balance.
        if(lodgeAmount>0 && accStatus==true)
        {
            currentBal += lodgeAmount;
        }
        else
        {
            //Mesage box pop-up if error in lodgement
            JOptionPane.showMessageDialog(null,"Lodgement error! Please check the lodging amount is greater than 0 and account status is 'Active'!"
            ,"Lodgement Error",JOptionPane.INFORMATION_MESSAGE);
        }
    }
    //Method for making withdrawal from account
    public void makeWithdrawal(double withdrawAmount)
    {
        //Checks if the withdrawal amount is positive integer and not zero
        if(withdrawAmount>0)
        {
            //Check if the account balance is sufficient for withdrawal and withdrawal amount is deducted from balance
            if(currentBal>=withdrawAmount)
            {
                currentBal -= withdrawAmount;
            }
            else
            {
                //Mesage box pop-up for insufficient funds available
                JOptionPane.showMessageDialog(null,"Error! Current Balace : €"+currentBal+"\nWithdraw amount : €"+withdrawAmount+"\nShortfall : €"
                    +(withdrawAmount-currentBal),"Withdraw Error",JOptionPane.INFORMATION_MESSAGE);
            }
        }
        else
        {
            //Mesage box pop-up for withdrawal amount not greater than zero
            JOptionPane.showMessageDialog(null,"Error! Please check the withdraw amount is greater than 0 and account status is 'Active'!"
            ,"Withdraw Error",JOptionPane.INFORMATION_MESSAGE);
        }
    }
    //Method for closing account- changes account status to inactive and refunds the balance amount 
    public void closeAccount()
    {
        accStatus=false;
        makeWithdrawal(currentBal);
        JOptionPane.showMessageDialog(null,accNumber+" account is closed! Balance amount €"+currentBal+" is refunded!","Account Deactivated!",JOptionPane.INFORMATION_MESSAGE);
    }
    //Method for returning account details
    public String toString()
    {
        return "Name :"+this.customerName+", A/c :"+this.accNumber+", Balance : €"+this.currentBal;
    }
}

